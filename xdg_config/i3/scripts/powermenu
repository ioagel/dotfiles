#!/usr/bin/env bash
#
# Use rofi to change system runstate thanks to systemd.
# This script is intended to be launched via a keybinding (e.g., in i3).
#
# Usage:
#   powermenu
#   powermenu --confirm # to enable confirmation

# Rofi theme option
ROFI_THEME=(-theme ~/.config/rofi/powermenu.rasi)
ROFI_PROMPT_TEXT="Action"

# Whether to ask for user's confirmation for critical actions
enable_confirmation=false
# Check if the script is called with --confirm
if [[ "$1" == "--confirm" ]]; then
    enable_confirmation=true
fi

# Check whether a command exists
function command_exists() {
    command -v "$1" &>/dev/null 2>&1
}

# Ensure rofi and systemctl are available
if ! command_exists rofi; then
    echo "Error: rofi command not found." >&2
    # Optionally, send a notification for i3 use:
    command_exists notify-send && notify-send -u critical "Power Menu Error" "Missing dependencies: rofi"
    exit 1
fi

# menu defined as an associative array
declare -A menu

# Menu with keys/commands
# Make sure we revert the keyboard layout to US before running some of the commands,
# because I cannot unlock the system with the Greek keyboard layout.
menu=(
    ["  Shutdown"]="$HOME/.config/i3/scripts/i3-safe-exit shutdown"
    ["  Reboot"]="$HOME/.config/i3/scripts/i3-safe-exit reboot"
    ["  Suspend"]="setxkbmap us && systemctl suspend"
    ["  Hibernate"]="setxkbmap us && systemctl hibernate"
    ["  Lock"]="setxkbmap us && $HOME/.config/i3/scripts/blur-lock"
    ["  Logout"]="$HOME/.config/i3/scripts/i3-safe-exit logout"
    ["  Cancel"]=""
)

menu_nrows=${#menu[@]}

# Menu entries that may trigger a confirmation message
# Ensure these keys exactly match the keys in the 'menu' array above
menu_confirm_actions=("  Shutdown" "  Reboot" "  Hibernate" "  Suspend" "  Logout")

# Prepare Rofi options
rofi_options=(-dmenu -i -lines "${menu_nrows}" -p "${ROFI_PROMPT_TEXT}" "${ROFI_THEME[@]}")

# Execute Rofi and get selection
selection="$(printf '%s\n' "${!menu[@]}" | sort | rofi "${rofi_options[@]}")"

# Function to ask for confirmation using Rofi
function ask_confirmation_rofi() {
    local prompt_message="${1:-Are you sure?}"
    local confirmed
    confirmed=$(echo -e "Yes\nNo" | rofi -dmenu -i -lines 2 -p "${prompt_message}" "${ROFI_THEME[@]}")
    if [[ "${confirmed}" == "Yes" ]]; then
        return 0 # Yes
    else
        return 1 # No or cancelled
    fi
}

# Process the selection
if [[ -n "${selection}" ]]; then
    command_to_run="${menu[${selection}]}"

    # If the command is empty (like for "Cancel"), do nothing
    if [[ -z "${command_to_run}" ]]; then
        exit 0
    fi

    # Check if the selected action requires confirmation
    action_requires_confirmation=false
    for action in "${menu_confirm_actions[@]}"; do
        if [[ "${selection}" == "${action}" ]]; then
            action_requires_confirmation=true
            break
        fi
    done

    if [[ "${enable_confirmation}" = true && "${action_requires_confirmation}" = true ]]; then
        if ask_confirmation_rofi "${selection}?"; then
            i3-msg -q "exec --no-startup-id ${command_to_run}"
        else
            exit 0 # User selected No in confirmation
        fi
    else
        # No confirmation needed or confirmation is disabled
        i3-msg -q "exec --no-startup-id ${command_to_run}"
    fi
fi
