#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

# NOTE: It is not used in favor of handling latest release through the GitHub rest api
# https://gist.github.com/steinwaywhw/a4cd19cda655b8249d908261a62687f8#gistcomment-3077928
latest_release_from_github() {
  local github_repo="$1"
  echo "$(curl -s https://github.com/"$github_repo"/releases/latest/download 2>&1 | grep -Po [0-9]+\.[0-9]+\.[0-9]+)"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

install_asdf_python() {
  python2_version="$(asdf list-all python| grep -v "[a-z3]" | tail -1)"
  python3_version="$(asdf list-all python| grep -v "[a-z]" | tail -1)"

  for version in $python2_version $python3_version; do
    if ! asdf list python | grep -Fq "$version"; then
      asdf install python "$version"
    fi
  done
  # keep mac os x usage of python 2 as default
  asdf global python "$python2_version" "$python3_version"
}

pip_install_or_update() {
  local package="$1"
  local python_version="${2:-3}"
  if [ "$python_version" -eq 2 ]; then
    pip_version=pip2
  else
    pip_version=pip3
  fi
  if "$pip_version" list --user 2> /dev/null | grep -q "^$package"; then
    "$pip_version" install -U --user "$package" >/dev/null 2>&1
    echo "$pip_version: $package updated!"
  else
    "$pip_version" install --user "$package" >/dev/null 2>&1
    echo "$pip_version: $package installed!"
  fi
}

yarn_install_or_update() {
  local package="$1"
  if yarn global list | grep -q "$package"; then
    yarn global upgrade "$package"
    echo "$package updated!"
  else
    yarn global add "$package"
    echo "$package installed!"
  fi
}
