#!/usr/bin/env bash
# Generates the i3 config from a template,
# replacing the theme placeholder with the specified theme name.

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Exit if unset variable is used (optional, but good practice)

# Common utility functions
# shellcheck disable=SC1090
source ~/.local/bin/_script_utils.sh

THEME="gruvbox-dark"   # Default theme
SEND_NOTIFICATION=true # Default: send notification

# --- Usage Function ---
usage() {
    local script_name
    script_name=$(basename "$0")
    echo "Usage: $script_name [-t|--theme <theme_name>] [-q|--quiet] [-h|--help]" >&2
    echo "  Applies the specified theme and builds the i3 config." >&2
    echo "  Options:" >&2
    echo "    -t, --theme <theme_name>  Specify the initial theme to activate (default: ${THEME})." >&2
    echo "    -q, --quiet               Suppress the final notification message." >&2
    echo "    -h, --help                Show this help message." >&2
    exit 1
}

# --- Argument Parsing ---
# Manual loop to handle both -t and --theme
while [ $# -gt 0 ]; do
    case "$1" in
    -t | --theme)
        if [[ -n "$2" && "$2" != -* ]]; then
            THEME="$2"
            shift # past argument
            shift # past value
        else
            echo "Error: Option '$1' requires an argument." >&2
            usage
        fi
        ;;
    -q | --quiet)
        SEND_NOTIFICATION=false
        shift # past argument
        ;;
    -h | --help)
        usage
        ;;
    --) # End of options
        shift
        break
        ;;
    -*)
        echo "Error: Unknown option '$1'" >&2
        usage
        ;;
    *)
        echo "Error: Unexpected argument '$1'" >&2
        usage
        ;;
    esac
done

# --- Configuration ---
I3_CONFIG_DIR=~/.config/i3

# Construct paths based on the fixed i3 config dir location
THEME_DIR="$I3_CONFIG_DIR/themes"
THEME_VARS_FILE="$THEME_DIR/${THEME}.vars"
CONFIG_TEMPLATE_DIR="$I3_CONFIG_DIR"
CONFIG_OUTPUT_DIR="$I3_CONFIG_DIR"
# --- End Configuration ---

# Dependency Checks
check_command "notify-send" "Please install: libnotify"

# Check if the theme variables file exists
if [ ! -f "$THEME_VARS_FILE" ]; then
    error "Theme file not found: $THEME_VARS_FILE"
fi

# Source the theme variables into the current environment
# Run in a subshell to avoid polluting the caller's environment
(
    log "Loading theme variables from $THEME_VARS_FILE..."
    # Filter out comments and empty lines before sourcing
    grep -vE '^\s*#|^\s*$' "$THEME_VARS_FILE" >/tmp/theme_vars_filtered.sh
    source /tmp/theme_vars_filtered.sh
    rm /tmp/theme_vars_filtered.sh # Clean up temporary file

    # Define template and output files
    declare -A TEMPLATE_MAP
    TEMPLATE_MAP=(
        ["$CONFIG_TEMPLATE_DIR/config.template"]="$CONFIG_OUTPUT_DIR/config"
        ["$CONFIG_TEMPLATE_DIR/config.d/bar.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/bar.conf" # Restore bar template processing
    )

    # Build the list of variables expected by envsubst
    # Reads keys like 'export FOO=..' -> extracts 'FOO' -> prepends '$'
    VAR_LIST=$(grep -oP '^export\s+\K[^=]+' "$THEME_VARS_FILE" | sed 's/^/$/' | paste -sd,)
    # echo "Variables for envsubst: $VAR_LIST" # Uncomment for debugging

    # Process each template file
    for template_file in "${!TEMPLATE_MAP[@]}"; do
        output_file="${TEMPLATE_MAP[$template_file]}"
        log "Processing '$template_file' -> '$output_file'"

        if [ ! -f "$template_file" ]; then
            warning "Template file not found: $template_file. Skipping."
            continue
        fi

        # Add Autogenerated header to the output file
        echo "# AUTOGENERATED by build-i3-config, DO NOT EDIT MANUALLY" >"$output_file"
        echo "# Instead, edit the template file: $template_file" >>"$output_file"

        # Use envsubst to replace only the variables defined in the theme file
        envsubst "$VAR_LIST" <"$template_file" >>"$output_file"
    done
) # End of subshell

# --- Set Default Tray Output in bar.conf ---
# After applying the theme, ensure bar.conf reflects the default 'monitor' layout tray setting.
DEFAULT_MONITOR_CONF="$CONFIG_OUTPUT_DIR/config.d/monitor.conf"
GENERATED_BAR_CONF="$CONFIG_OUTPUT_DIR/config.d/bar.conf"

log "Setting default tray output in '$GENERATED_BAR_CONF' based on '$DEFAULT_MONITOR_CONF'..."

if [ -f "$DEFAULT_MONITOR_CONF" ] && [ -f "$GENERATED_BAR_CONF" ]; then
    # Extract the default tray monitor value
    DEFAULT_TRAY_VALUE=$(grep '^set \$__tray_monitor' "$DEFAULT_MONITOR_CONF" | awk '{print $3}')

    if [ -n "$DEFAULT_TRAY_VALUE" ]; then
        # Update the tray_output line in the generated bar.conf
        log "Updating '$GENERATED_BAR_CONF' tray output to default: '$DEFAULT_TRAY_VALUE'..."
        sed -i "s/^\s*tray_output.*/  tray_output $DEFAULT_TRAY_VALUE/" "$GENERATED_BAR_CONF"
        log "Default tray output set."

        # Also create the symlink for the default monitor layout
        SYMLINK_PATH="$CONFIG_OUTPUT_DIR/config.d/monitor-layout-current.conf"
        log "Setting default monitor layout symlink '$SYMLINK_PATH' -> '$DEFAULT_MONITOR_CONF'..."
        ln -sf "$DEFAULT_MONITOR_CONF" "$SYMLINK_PATH"
        log "Default monitor layout symlink set."
    else
        warning "Could not extract \$__tray_monitor value from '$DEFAULT_MONITOR_CONF'. Default tray/monitor symlink not set."
    fi
else
    warning "Default monitor config ('$DEFAULT_MONITOR_CONF') or generated bar config ('$GENERATED_BAR_CONF') not found. Default tray/monitor symlink not set."
fi

log "Theme '$THEME' applied successfully to files in $CONFIG_OUTPUT_DIR. Reload i3."

# Send notification
if [[ "$SEND_NOTIFICATION" = true ]]; then
    log "Sending notification..."
    notify-send "i3 Theme Applied" "Switched to '$THEME' theme. Reload i3."
fi
