#!/usr/bin/env bash
# shellcheck disable=SC1090 disable=SC2016
# Generates the i3 config from a template,
# replacing the theme placeholder with the specified theme name.

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Exit if unset variable is used (optional, but good practice)

# Useful functions
source ~/.local/lib/utils.sh
source ~/.local/lib/extract.sh

THEME_DIR=~/.config/themes
THEME_VARS_FILE="$THEME_DIR/active-theme.sh"

# If the theme variables are not loaded, we are starting fresh
# If the theme variables are already loaded, we are using a sourced theme
# so THEME_NAME and THEME_DISPLAY_NAME are already set
if [ -z "${THEME_MODE:-}" ]; then
    # Load the theme variables from the active theme file
    [ -f "$THEME_VARS_FILE" ] || error "Theme file not found: $THEME_VARS_FILE"
    raw_line=$(grep -m 1 'THEME_NAME=' "$THEME_VARS_FILE")
    THEME_NAME=$(get_raw_variable_value "$raw_line")
    raw_line=$(grep -m 1 'THEME_DISPLAY_NAME=' "$THEME_VARS_FILE")
    THEME_DISPLAY_NAME=$(get_raw_variable_value "$raw_line")
fi

ARG_THEME=""           # Default: empty, so the active theme is used or any sourced theme
BAR_TYPE="polybar"     # Default: polybar
SEND_NOTIFICATION=true # Default: send notification

I3_CONFIG_DIR=~/.config/i3
CONFIG_TEMPLATE_DIR="$I3_CONFIG_DIR"
CONFIG_OUTPUT_DIR="$I3_CONFIG_DIR"

# --- Usage Function ---
usage() {
    local script_name
    script_name=$(basename "$0")
    echo "Usage: $script_name [-t|--theme <theme_name>] [-b|--bar <bar_type>] [-q|--quiet] [-h|--help]" >&2
    echo "  Applies the specified theme and builds the i3 config." >&2
    echo "  Options:" >&2
    echo "    -t, --theme <theme_name>  Specify the initial theme to activate (default: ${THEME_DISPLAY_NAME})." >&2
    echo "    -b, --bar <bar_type>      Specify the bar type to use (default: $BAR_TYPE). Options: polybar, i3bar." >&2
    echo "    -q, --quiet               Suppress the final notification message." >&2
    echo "    -h, --help                Show this help message." >&2
    exit 1
}

# --- Argument Parsing ---
# Manual loop to handle both -t and --theme
while [ $# -gt 0 ]; do
    case "$1" in
    -t | --theme)
        if [[ -n "$2" && "$2" != -* ]]; then
            ARG_THEME="$2"
            shift # past argument
            shift # past value
        else
            echo "Error: Option '$1' requires an argument." >&2
            usage
        fi
        ;;
    -b | --bar)
        if [[ -n "$2" && "$2" != -* ]]; then
            BAR_TYPE="$2"
            shift # past argument
            shift # past value
        else
            echo "Error: Option '$1' requires an argument." >&2
            usage
        fi
        ;;
    -q | --quiet)
        SEND_NOTIFICATION=false
        shift # past argument
        ;;
    -h | --help)
        usage
        ;;
    --) # End of options
        shift
        break
        ;;
    -*)
        echo "Error: Unknown option '$1'" >&2
        usage
        ;;
    *)
        echo "Error: Unexpected argument '$1'" >&2
        usage
        ;;
    esac
done

# Validate the bar type is either polybar or i3bar
case "$BAR_TYPE" in
polybar | i3bar)
    # Valid bar type
    ;;
*)
    echo "Error: Invalid bar type '$BAR_TYPE'. Supported options: polybar, i3bar." >&2
    usage
    ;;
esac

# Determine the effective theme ID
effective_theme_id=""
if [ -n "$ARG_THEME" ]; then
    effective_theme_id="$ARG_THEME"
elif [ -n "$THEME_NAME" ]; then # THEME_NAME here is the default identifier
    effective_theme_id="$THEME_NAME"
else
    error "Theme identifier could not be determined."
fi

THEME_VARS_FILE="$THEME_DIR/$effective_theme_id/theme.sh"

# Dependency Checks
check_command "notify-send" "Please install: libnotify"

# Check if the theme variables file exists
if [ ! -f "$THEME_VARS_FILE" ]; then
    error "Theme file not found: $THEME_VARS_FILE"
fi

log "Sourcing theme variables from $THEME_VARS_FILE..."
source "$THEME_VARS_FILE"

# Define template and output files
declare -A TEMPLATE_MAP
TEMPLATE_MAP=(
    ["$CONFIG_TEMPLATE_DIR/config.d/$BAR_TYPE.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/bar.conf"
    ["$CONFIG_TEMPLATE_DIR/config.d/config-colors.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/config-colors.conf"
)

vars_for_envsubst=""
# compgen -A variable lists all variable names (Bash specific)
# grep '^I3_' filters for those starting with I3_
i3_var_names=$(compgen -A variable | grep '^I3_')

if [ -n "$i3_var_names" ]; then
    for var_name in $i3_var_names; do
        # Prepend '$' to each variable name for envsubst format
        vars_for_envsubst="$vars_for_envsubst \$$var_name"
    done
    # Remove leading space from the list
    vars_for_envsubst="${vars_for_envsubst# }"
fi

# Optional Debugging:
# log "Variables for envsubst: '$vars_for_envsubst'"

temp_envsubst_output_file=/tmp/i3-config.envsubst.tmp  # Temporary file for envsubst output
temp_cleaned_body_file=/tmp/i3-config.cleaned_body.tmp # Temporary file for cleaned body

# Process each template file
for template_file in "${!TEMPLATE_MAP[@]}"; do
    output_file="${TEMPLATE_MAP[$template_file]}"
    log "Processing '$template_file' -> '$output_file'"

    if [ ! -f "$template_file" ]; then
        warning "Template file not found: $template_file. Skipping."
        continue
    fi

    if [ -n "$vars_for_envsubst" ]; then
        # Substitute only the I3_ prefixed variables
        envsubst "$vars_for_envsubst" <"$template_file" >"$temp_envsubst_output_file"
        # Clean the envsubst output into a separate temporary file for the body
        clean_config_file "$temp_envsubst_output_file" >"$temp_cleaned_body_file"

        # Write the autogenerated header to the target file (overwrite)
        echo "# AUTOGENERATED by $(basename "$0"), DO NOT EDIT MANUALLY" >"$output_file"
        echo "# Instead, edit the template file: $template_file" >>"$output_file"

        # Append the cleaned body to the target file
        cat "$temp_cleaned_body_file" >>"$output_file"

        rm -f "$temp_envsubst_output_file" # Clean up first temp file
        rm -f "$temp_cleaned_body_file"    # Clean up second temp file
    else
        warning "No I3_ prefixed variables found in the current environment for envsubst. Appending template content without substitution."
        # Append the original template content if no variables are to be substituted
        cat "$template_file" >>"$output_file"
        log "Appended template to output as no I3_ variables were identified for substitution."
    fi
done

# --- Set Default Tray Output in bar.conf ---
# After applying the theme, ensure bar.conf reflects the default 'monitor' layout tray setting.
DEFAULT_MONITOR_CONF="$CONFIG_OUTPUT_DIR/config.d/monitor.conf"
GENERATED_BAR_CONF="$CONFIG_OUTPUT_DIR/config.d/bar.conf"

log "Setting default tray output in '$GENERATED_BAR_CONF' based on '$DEFAULT_MONITOR_CONF'..."

if [ -f "$DEFAULT_MONITOR_CONF" ] && [ -f "$GENERATED_BAR_CONF" ]; then
    # Extract the default tray monitor value
    DEFAULT_TRAY_VALUE=$(grep '^set \$__tray_monitor' "$DEFAULT_MONITOR_CONF" | awk '{print $3}')

    if [ -n "$DEFAULT_TRAY_VALUE" ]; then
        # Update the tray_output line in the generated bar.conf
        log "Updating '$GENERATED_BAR_CONF' tray output to default: '$DEFAULT_TRAY_VALUE'..."
        sed -i "s/^\s*tray_output.*/  tray_output $DEFAULT_TRAY_VALUE/" "$GENERATED_BAR_CONF"
        log "Default tray output set."

        # Also create the symlink for the default monitor layout
        SYMLINK_PATH="$CONFIG_OUTPUT_DIR/config.d/monitor-layout-current.conf"
        log "Setting default monitor layout symlink '$SYMLINK_PATH' -> '$DEFAULT_MONITOR_CONF'..."
        ln -sf "$DEFAULT_MONITOR_CONF" "$SYMLINK_PATH"
        log "Default monitor layout symlink set."
    else
        warning "Could not extract \$__tray_monitor value from '$DEFAULT_MONITOR_CONF'. Default tray/monitor symlink not set."
    fi
else
    warning "Default monitor config ('$DEFAULT_MONITOR_CONF') or generated bar config ('$GENERATED_BAR_CONF') not found. Default tray/monitor symlink not set."
fi

# THEME_DISPLAY_NAME is set in the theme variables file
log "Theme '$THEME_DISPLAY_NAME' applied successfully to files in $CONFIG_OUTPUT_DIR. Reload i3."

# Send notification
if [[ "$SEND_NOTIFICATION" = true ]]; then
    log "Sending notification..."
    notify-send "i3 Theme Applied" "Switched to '$THEME_DISPLAY_NAME' theme. Reload i3."
fi
