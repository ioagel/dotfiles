#!/usr/bin/env bash
# shellcheck disable=SC1090 disable=SC1091

set -e

# Common utility functions
# shellcheck disable=SC1090
source ~/.local/lib/utils.sh

DARK_THEME="${DARK_THEME:-gruvbox-dark}"       # Default dark theme: gruvbox-dark
LIGHT_THEME="${LIGHT_THEME:-catppuccin-latte}" # Default light theme: catppuccin-latte

# Notification ID used by notify-send, must be unique
NOTIFICATION_ID=6775

# Configuration Paths
XSETTINGSD_CONFIG_DIR="$HOME/.config/xsettingsd"
YAZI_CONFIG_DIR="$HOME/.config/yazi"
POLYBAR_CONFIG_DIR="$HOME/.config/polybar"

MODE="${1:-toggle}"

# Dependency Checks
check_command "gsettings"
check_command "build-i3-config"
check_command "build-zellij-config"
check_command "build-vscode-settings"
check_command "build-rofi-config"
check_command "i3-msg"
check_command "jq"
check_command "notify-send" "Please install: libnotify"
# nvr is checked later inline as it's optional

# --- Theme Update Functions ---
update_gnome_theme() {
    local mode="$1"
    gsettings set org.gnome.desktop.interface color-scheme "prefer-${mode}"
    log "GNOME/GTK theme set to prefer-${mode}."
}

update_i3_theme() {
    local theme_name="$1"
    echo "#### Running: build-i3-config"
    build-i3-config -q -t "${theme_name}"
    echo "#### Done: build-i3-config"

    # restart polybar if it's running
    if pgrep -x polybar >/dev/null; then
        "${POLYBAR_CONFIG_DIR}/scripts/launch.sh" &>/dev/null &
        log "Polybar launch script executed."
    else
        warning "Polybar not running, skipping re-launch."
    fi

    # reload i3 config
    i3-msg reload
    log "i3 config reloaded."
}

update_zellij_theme() {
    local theme_name="$1"
    echo "#### Running: build-zellij-config"
    build-zellij-config -q -t "${theme_name}"
    echo "#### Done: build-zellij-config"
}

update_xsettingsd_theme() {
    local theme_name="$1"
    local target_conf="${XSETTINGSD_CONFIG_DIR}/themes/${theme_name}.conf"
    if [ -f "${target_conf}" ]; then
        ln -sf "${target_conf}" "${XSETTINGSD_CONFIG_DIR}/xsettingsd.conf"
        log "xsettingsd theme linked to ${theme_name}.conf."

        # reload xsettingsd if it's running
        if pgrep -x xsettingsd >/dev/null; then
            killall -HUP xsettingsd
            log "xsettingsd reloaded."
        else
            warning "xsettingsd not running, skipping reload."
        fi
    else
        warning "xsettingsd theme file not found: ${target_conf}"
    fi
}

update_yazi_theme() {
    local theme_name="$1"
    local target_toml="${YAZI_CONFIG_DIR}/themes/theme-${theme_name}.toml"
    if [ -f "${target_toml}" ]; then
        ln -sf "${target_toml}" "${YAZI_CONFIG_DIR}/theme.toml"
        log "Yazi theme linked to theme-${theme_name}.toml."
    else
        warning "Yazi theme file not found: ${target_toml}"
    fi
}

update_vscode_settings() {
    local theme_name="$1"
    echo "#### Running: build-vscode-settings"
    build-vscode-settings -q -t "${theme_name}"
    echo "#### Done: build-vscode-settings"
}

update_neovim_themes() {
    if command -v nvr &>/dev/null; then
        # Find all Neovim server sockets
        local found_instance=0
        for socket in /tmp/nvimsocket* /run/user/$(id -u)/nvim*; do
            if [ -e "$socket" ]; then
                # Send UpdateColorscheme command to each Neovim instance with THEME and MODE
                NVIM_LISTEN_ADDRESS="$socket" nvr --remote-send "<Esc>:UpdateColorscheme ${THEME} ${MODE}<CR>" &>/dev/null
                found_instance=1
            fi
        done
        if [ "$found_instance" -eq 1 ]; then
            log "Neovim instances notified to update colorscheme."
        else
            log "No running Neovim instances found by nvr."
        fi
    else
        warning "neovim-remote (nvr) not found. Install with: yay -S neovim-remote"
        warning "Neovim instances will update their theme on the next periodic check (if configured)."
    fi
}

update_dunst_theme() {
    echo "#### Running: build-dunst-config"
    build-dunst-config
    echo "#### Done: build-dunst-config"
}

update_rofi_theme() {
    echo "#### Running: build-rofi-config"
    build-rofi-config
    echo "#### Done: build-rofi-config"
}

# --- Main Logic ---

## Determine Target Theme and Mode
if [[ $MODE == "dark" ]]; then
    THEME="${2:-${DARK_THEME}}"
elif [[ $MODE == "light" ]]; then
    THEME="${2:-${LIGHT_THEME}}"
elif [[ $MODE == "toggle" ]]; then
    current_theme_preference=$(gsettings get org.gnome.desktop.interface color-scheme)
    if [[ $current_theme_preference == *"light"* ]]; then
        MODE="dark"
        THEME="${DARK_THEME}"
    else
        MODE="light"
        THEME="${LIGHT_THEME}"
    fi
else
    error "Invalid mode '$MODE'. Use 'light', 'dark', or 'toggle'."
fi

log "Switching to ${MODE} mode with theme: ${THEME}"

target_theme_sh_file="$HOME/.config/themes/${THEME}/theme.sh"
if [ ! -f "$target_theme_sh_file" ]; then
    error "Target theme file not found: $target_theme_sh_file. Cannot create active-theme symlink."
    # exit 1 here, or let the source command fail, but this is more direct.
fi
ln -sf "$target_theme_sh_file" "$HOME/.config/themes/active-theme.sh"
source "$HOME/.config/themes/active-theme.sh"

## Apply Themes
update_gnome_theme "${MODE}"
update_zellij_theme "${THEME}"
update_xsettingsd_theme "${THEME}"
update_yazi_theme "${THEME}"
update_vscode_settings "${THEME}"
update_neovim_themes
update_dunst_theme
update_rofi_theme
update_i3_theme "${THEME}"

# THEME_DISPLAY_NAME is defined in the active-theme.sh file
log "**** Theme switch to ${THEME_DISPLAY_NAME} (${MODE}) complete. ****"
sleep 1
notify-send -r $NOTIFICATION_ID "Theme Switch" "Switched to ${THEME_DISPLAY_NAME} (${MODE} mode)."
