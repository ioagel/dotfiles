#!/usr/bin/env bash
set -e

DARK_THEME="${DARK_THEME:-gruvbox-dark}"
LIGHT_THEME="${LIGHT_THEME:-catppuccin-latte}"

# Configuration Paths
XSETTINGSD_CONFIG_DIR="$HOME/.config/xsettingsd"
POLYBAR_CONFIG_DIR="$HOME/.config/polybar"
YAZI_CONFIG_DIR="$HOME/.config/yazi"

MODE="${1:-toggle}"

# Helper function to check for command existence
check_command() {
    if ! command -v "$1" &>/dev/null; then
        echo "Error: Required command '$1' not found. Please install it." >&2
        exit 1
    fi
}

# Dependency Checks
check_command "gsettings"
check_command "build-i3-config"
check_command "build-zellij-config"
check_command "build-vscode-settings"
check_command "polybar-msg"
check_command "i3-msg"
check_command "jq"
# nvr is checked later inline as it's optional

# --- Theme Update Functions ---
update_gnome_theme() {
    local mode="$1"
    gsettings set org.gnome.desktop.interface color-scheme "prefer-${mode}"
    echo "GNOME/GTK theme set to prefer-${mode}."
}

update_i3_theme() {
    local theme_name="$1"
    build-i3-config -t "${theme_name}"
    echo "i3 config updated with theme: ${theme_name}."
}

update_zellij_theme() {
    local theme_name="$1"
    build-zellij-config -t "${theme_name}"
    echo "Zellij config updated with theme: ${theme_name}."
}

update_xsettingsd_theme() {
    local theme_name="$1"
    local target_conf="${XSETTINGSD_CONFIG_DIR}/themes/${theme_name}.conf"
    if [ -f "${target_conf}" ]; then
        ln -sf "${target_conf}" "${XSETTINGSD_CONFIG_DIR}/xsettingsd.conf"
        echo "xsettingsd theme linked to ${theme_name}.conf."
    else
        echo "Warning: xsettingsd theme file not found: ${target_conf}" >&2
    fi
}

update_polybar_theme() {
    local theme_name="$1"
    local target_ini="${POLYBAR_CONFIG_DIR}/modules/themes/${theme_name}.ini"
    if [ -f "${target_ini}" ]; then
        ln -sf "${target_ini}" "${POLYBAR_CONFIG_DIR}/modules/colors.ini"
        echo "Polybar theme linked to ${theme_name}.ini."
    else
        echo "Warning: Polybar theme file not found: ${target_ini}" >&2
    fi
}

update_yazi_theme() {
    local theme_name="$1"
    local target_toml="${YAZI_CONFIG_DIR}/themes/theme-${theme_name}.toml"
    if [ -f "${target_toml}" ]; then
        ln -sf "${target_toml}" "${YAZI_CONFIG_DIR}/theme.toml"
        echo "Yazi theme linked to theme-${theme_name}.toml."
    else
        echo "Warning: Yazi theme file not found: ${target_toml}" >&2
    fi
}

update_vscode_settings() {
    local theme_name="$1"
    build-vscode-settings -t "${theme_name}"
    echo "VS Code settings updated with theme: ${theme_name}."
}

update_neovim_themes() {
    if command -v nvr &>/dev/null; then
        # Find all Neovim server sockets
        local found_instance=0
        for socket in /tmp/nvimsocket* /run/user/$(id -u)/nvim*; do
            if [ -e "$socket" ]; then
                # Send UpdateColorscheme command to each Neovim instance with THEME and MODE
                NVIM_LISTEN_ADDRESS="$socket" nvr --remote-send "<Esc>:UpdateColorscheme ${THEME} ${MODE}<CR>" &>/dev/null
                found_instance=1
            fi
        done
        if [ "$found_instance" -eq 1 ]; then
            echo "Neovim instances notified to update colorscheme."
        else
            echo "No running Neovim instances found by nvr."
        fi
    else
        echo "neovim-remote (nvr) not found. Install with: yay -S neovim-remote"
        echo "Neovim instances will update their theme on the next periodic check (if configured)."
    fi
}

# --- Main Logic ---

# Determine Target Theme and Mode
if [[ $MODE == "dark" ]]; then
    THEME="${2:-${DARK_THEME}}"
elif [[ $MODE == "light" ]]; then
    THEME="${2:-${LIGHT_THEME}}"
elif [[ $MODE == "toggle" ]]; then
    current_theme_preference=$(gsettings get org.gnome.desktop.interface color-scheme)
    if [[ $current_theme_preference == *"light"* ]]; then
        MODE="dark"
        THEME="${DARK_THEME}"
    else
        MODE="light"
        THEME="${LIGHT_THEME}"
    fi
else
    echo "Error: Invalid mode '$MODE'. Use 'light', 'dark', or 'toggle'." >&2
    exit 1
fi

echo "Switching to ${MODE} mode with theme: ${THEME}"

# Apply Themes
update_gnome_theme "${MODE}"
update_i3_theme "${THEME}"
update_zellij_theme "${THEME}"
update_xsettingsd_theme "${THEME}"
update_polybar_theme "${THEME}"
update_yazi_theme "${THEME}"
update_vscode_settings "${THEME}"
update_neovim_themes

# Reload Services
echo "Reloading services..."
if pgrep -x xsettingsd >/dev/null; then
    killall -HUP xsettingsd
    echo "xsettingsd reloaded."
else
    echo "xsettingsd not running, skipping reload."
fi

if pgrep -x polybar >/dev/null; then
    polybar-msg cmd restart &>/dev/null
    echo "Polybar restart command sent."
else
    echo "Polybar not running, skipping restart."
fi

i3-msg reload
echo "i3 config reloaded."

echo "Theme switch to ${THEME} (${MODE}) complete."
