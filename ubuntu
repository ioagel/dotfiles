#!/usr/bin/env bash
# NOTE: hitting the GitHub api without an auth token limits the requests
# at 60/hour.

snapd="$(snap version 2> /dev/null | sed -n 2p | awk '{print $2}')"

# add required repositories
sudo add-apt-repository -y universe

sudo apt -y update

sudo apt -y install \
  autoconf automake build-essential python-dev libtool libssl-dev pkg-config \
  libreadline-dev libncurses-dev libssl-dev coreutils libyaml-dev libxslt-dev \
  libffi-dev libtool unixodbc-dev unzip curl gnupg git tmux \
  rcm zsh htop unixodbc fasd shellcheck jq tree wget silversearcher-ag cmake \
  apt-transport-https ca-certificates zlib1g-dev

if [ "$snapd" != 'unavailable' ]; then
  sudo snap install universal-ctags && sudo snap connect universal-ctags:dot-ctags
#  sudo snap install ngrok && sudo snap connect ngrok:ngrok-config
fi

rg_installed="$(rg -V 2> /dev/null | awk '{print $2}')"
rg_latest="$(latest_release_from_github 'BurntSushi/ripgrep')"
if [ "$rg_installed" != "$rg_latest" ]; then
  echo "Installing/Upgrading ripgrep ..."
  if [ "$rg_installed" ]; then
    sudo dpkg -r ripgrep
  fi
  wget --quiet --continue --show-progress -P /tmp https://github.com/BurntSushi/ripgrep/releases/latest/download/ripgrep_"$rg_latest"_amd64.deb
  sudo dpkg -i /tmp/ripgrep_"$rg_latest"_amd64.deb
  rm -f /tmp/ripgrep_"$rg_latest"_amd64.deb
fi

bat_installed="$(bat -V 2> /dev/null | awk '{print $2}')"
bat_latest="$(latest_release_from_github 'sharkdp/bat' no)"
if [ "$bat_installed" != "$bat_latest" ]; then
  echo "Installing/Upgrading bat ..."
  if [ "$bat_installed" ]; then
    sudo dpkg -r bat
  fi
  wget --quiet --continue --show-progress -P /tmp https://github.com/sharkdp/bat/releases/latest/download/bat_"$bat_latest"_amd64.deb
  sudo dpkg -i /tmp/bat_"$bat_latest"_amd64.deb
  rm -f /tmp/bat_"$bat_latest"_amd64.deb
fi

# install neovim latest from appimage
# TODO: unocmment this when nvim 0.5 is released
#nvim_installed="$(nvim -v 2> /dev/null | head -n 1 | awk '{print $2}')"
#nvim_latest="$(latest_release_from_github 'neovim/neovim')"
#if [ "$nvim_installed" != "$nvim_latest" ]; then
#  echo "Installing/Upgrading neovim ..."
#  wget --quiet --continue --show-progress \
#    https://github.com/neovim/neovim/releases/download/"$nvim_latest"/nvim.appimage \
#    -O ~/.bin/nvim
#fi
# TODO: remove this when nvim 0.5 is released
wget --quiet --continue --show-progress \
  https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage \
  -O ~/.bin/nvim
chmod u+x ~/.bin/nvim

# install lazydocker: A simple terminal UI for both docker and docker-compose
lzd_installed="$(lazydocker --version 2> /dev/null | head -n 1 | awk '{print $2}')"
lzd_latest="$(latest_release_from_github 'jesseduffield/lazydocker' no)"
if [ "$lzd_installed" != "$lzd_latest" ]; then
  echo "Installing/Upgrading lazydocker ..."
  wget --quiet --continue --show-progress -P /tmp https://github.com/jesseduffield/lazydocker/releases/latest/download/lazydocker_"$lzd_latest"_Linux_x86_64.tar.gz
  sudo tar -C /usr/local/bin -xzf /tmp/lazydocker_"$lzd_latest"_Linux_x86_64.tar.gz lazydocker
  rm -f /tmp/lazydocker_"$lzd_latest"_Linux_x86_64.tar.gz
fi

# Install lazygit
command -v lazygit > /dev/null
if [ "$?" -ne 0 ]; then
  sudo add-apt-repository ppa:lazygit-team/release
  sudo apt-get update
  sudo apt-get install lazygit
fi

# install Kubernetes tools
# kubectl
# Download the Google Cloud public signing key:
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get -y update
sudo apt-get install -y kubectl
#kube-ps1
if [ ! -d "$HOME/.config/kube-ps1" ]; then
  git clone https://github.com/jonmosco/kube-ps1.git ~/.config/kube-ps1
fi

# Install gui apps and fonts
if [ "$WITH_GUI" = 'yes' ]; then
  sudo add-apt-repository -y ppa:aslatter/ppa
  sudo apt -y update
  mkdir -p ~/.local/share/fonts

  sudo apt -y install fontconfig fonts-firacode alacritty firefox vlc \
    calibre xclip

  # adobe source code pro
  scp_url_version="2.030R-ro%2F1.050R-it"
  scp_version="2.030R-ro-1.050R-it"
  wget -P /tmp https://github.com/adobe-fonts/source-code-pro/releases/download/"$scp_url_version"/source-code-pro-"$scp_version".zip
  unzip /tmp/source-code-pro-"$scp_version".zip -d /tmp
  mv -f /tmp/source-code-pro-"$scp_version"/OTF/* ~/.local/share/fonts
  # nerd fonts
  wget -P /tmp https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip
  wget -P /tmp https://github.com/ryanoasis/nerd-fonts/releases/latest/download/SourceCodePro.zip
  unzip /tmp/FiraCode.zip -d /tmp/FiraCode && mv -f /tmp/FiraCode/* ~/.local/share/fonts
  unzip /tmp/SourceCodePro.zip -d /tmp/SourceCodePro && mv -f /tmp/SourceCodePro/* ~/.local/share/fonts
  fc-cache -fr
  rm -rf /tmp/source-code-pro* /tmp/FiraCode* /tmp/SourceCodePro*

  if [ "$snapd" != 'unavailable' ]; then
#    sudo snap install intellij-idea-ultimate --classic
#    sudo snap install datagrip --classic
    sudo snap install code --classic
    sudo snap install spotify
  fi

  wget -P /tmp https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  sudo dpkg -i /tmp/google-chrome-stable_current_amd64.deb
  rm -rf /tmp/google-chrome*
fi

# check for env variable WITH_JAVA before installing java/maven support
if [ "$WITH_JAVA" = 'yes' ]; then
  sudo apt -y install maven
fi

## Watchman exists to watch files and record when they change.
## It can also trigger actions (such as rebuilding assets) when matching files change.
#watchman_installed="$(watchman -v 2> /dev/null; exit 0)"
#watchman_latest_raw="$(curl -s https://api.github.com/repos/facebook/watchman/tags | jq -r .[0].name)"
#watchman_latest="${watchman_latest_raw:1}"
#if [ "$watchman_installed" != "$watchman_latest" ]; then
#  git clone https://github.com/facebook/watchman.git /tmp/watchman -b "$watchman_latest_raw" --depth 1
#  cd /tmp/watchman
#  ./autogen.sh
#  ./configure --enable-lenient
#  make
#  sudo make install
#  cd "$cwd"
#  sudo rm -rf /tmp/watchman
#fi
