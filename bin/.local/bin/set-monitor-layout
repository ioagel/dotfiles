#!/bin/sh

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Script Purpose ---
# This script applies a specific i3 monitor layout configuration and updates
# the i3 bar configuration to show the system tray on the correct monitor
# for that layout. It assumes:
# 1. Corresponding layout files (monitor.conf, monitor2.conf, etc.) exist
#    within the dotfiles config directory.
# 2. A generated bar config (bar.conf) exists in the same directory,
#    created by build-i3-config.sh.
# 3. The monitor layout files define a variable '$__tray_monitor' specifying
#    the desired tray output (e.g., 'primary', 'DisplayPort-1', 'VM-1').
# 4. The user manages symlinking the final config files from the dotfiles
#    repo to ~/.config/i3.

# --- Configuration and Input ---
CONFIG_NAME="$1"  # The desired layout name (e.g., 'monitor', 'monitor2')
VIRTMON_ARGS="$2" # Optional arguments for the 'virtmon' command

# Check if a layout name was provided
if [ -z "$CONFIG_NAME" ]; then
    echo "Usage: $0 <config_name> [virtmon_args]" >&2
    echo "  Example: $0 monitor" >&2
    echo "  Example: $0 monitor2 33" >&2
    exit 1
fi

# Define directory paths (using standard $HOME/.dotfiles convention)
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.dotfiles}"
GENERATED_CONFIG_DIR="$DOTFILES_DIR/config/i3/config.d"

# Define full paths to the relevant generated configuration files
TARGET_MONITOR_CONF="$GENERATED_CONFIG_DIR/$CONFIG_NAME.conf"
GENERATED_BAR_CONF="$GENERATED_CONFIG_DIR/bar.conf"

# --- Input Validation ---
# Ensure the necessary generated files exist before proceeding
if [ ! -f "$TARGET_MONITOR_CONF" ]; then
    echo "Error: Monitor config file not found: '$TARGET_MONITOR_CONF'" >&2
    echo "Hint: Check layout name or run build-i3-config.sh." >&2
    exit 1
fi
if [ ! -f "$GENERATED_BAR_CONF" ]; then
    echo "Error: Generated bar config file not found: '$GENERATED_BAR_CONF'" >&2
    echo "Hint: Run build-i3-config.sh first." >&2
    exit 1
fi

# --- Execute virtmon (if applicable) ---
# Applies virtual monitor splits using the 'virtmon' utility
echo "Setting up virtmon..."
if [ -n "$VIRTMON_ARGS" ]; then
    # virtmon expects comma separation (e.g., '25,75') but we use colon
    # in the i3 config keybinding for safety. Convert colon to comma.
    case "$VIRTMON_ARGS" in
    *:*) FINAL_VIRTMON_ARG=$(echo "$VIRTMON_ARGS" | sed 's/:/,/g') ;;
    *) FINAL_VIRTMON_ARG="$VIRTMON_ARGS" ;;
    esac
    echo "Calling virtmon with arg: '$FINAL_VIRTMON_ARG'"
    virtmon "$FINAL_VIRTMON_ARG"
else
    echo "Calling virtmon with no args (default behavior)"
    virtmon
fi

# --- Update i3 Bar Tray Output ---
# Read the target monitor file to find which monitor should host the tray
echo "Extracting tray setting from '$TARGET_MONITOR_CONF'..."
# Find the line 'set $__tray_monitor <value>' and extract the <value>
TRAY_MONITOR_VALUE=$(grep '^set \$__tray_monitor' "$TARGET_MONITOR_CONF" | awk '{print $3}')

# Ensure a value was actually found
if [ -z "$TRAY_MONITOR_VALUE" ]; then
    echo "Error: Could not extract \$__tray_monitor value from '$TARGET_MONITOR_CONF'." >&2
    exit 1
fi
echo "Extracted tray monitor value: [$TRAY_MONITOR_VALUE]"

# Modify the generated bar.conf *in place* within the dotfiles directory
echo "Updating tray_output directive in '$GENERATED_BAR_CONF'..."
# Find the line starting with 'tray_output' (allowing for whitespace)
# and replace the entire line with the correct value.
sed -i "s/^\s*tray_output.*/  tray_output $TRAY_MONITOR_VALUE/" "$GENERATED_BAR_CONF"
echo "Tray output directive updated in '$GENERATED_BAR_CONF'."

# --- Restart i3 ---
# Pause briefly to allow virtmon changes (if any) to settle before restart
sleep 1

echo "Restarting i3 to apply changes..."
i3-msg restart

echo "Monitor layout '$CONFIG_NAME' applied successfully."
exit 0
