#!/bin/bash

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Exit if unset variable is used (optional, but good practice)

# --- Usage Function ---
usage() {
    echo "Usage: $0 [-t|--theme] <theme_name>" >&2
    echo "  Applies the specified theme and builds the i3 config." >&2
    exit 1
}

# --- Argument Parsing ---
THEME_NAME=""

# Manual loop to handle both -t and --theme
while [ $# -gt 0 ]; do
    case "$1" in
    -t | --theme)
        if [ -n "$2" ]; then
            THEME_NAME="$2"
            shift # past argument
            shift # past value
        else
            echo "Error: Option '$1' requires an argument." >&2
            usage
        fi
        ;;
    --theme=*)
        THEME_NAME="${1#*=}" # Extract value after =
        shift                # past argument=value
        ;;
    -*)
        echo "Error: Unknown option '$1'" >&2
        usage
        ;;
    *)
        # Allow positional argument as fallback? (Optional, currently disabled)
        # if [ -z "$THEME_NAME" ]; then
        #     THEME_NAME="$1"
        #     shift
        # else
        echo "Error: Unexpected argument '$1'" >&2
        usage
        # fi
        ;;
    esac
done

# Check if theme name was provided
if [ -z "$THEME_NAME" ]; then
    echo "Error: Theme name must be specified with -t or --theme." >&2
    usage
fi

# --- Configuration ---
# Assume dotfiles directory is in a fixed location
DOTFILES_DIR="$HOME/.dotfiles"

# Construct paths based on the fixed dotfiles location
THEME_DIR="$DOTFILES_DIR/config/i3/themes"
THEME_VARS_FILE="$THEME_DIR/${THEME_NAME}.vars"
CONFIG_TEMPLATE_DIR="$DOTFILES_DIR/config/i3"
CONFIG_OUTPUT_DIR="$DOTFILES_DIR/config/i3" # Output to .dotfiles repo
# --- End Configuration ---

# Check if the theme variables file exists
if [ ! -f "$THEME_VARS_FILE" ]; then
    echo "Error: Theme file not found: $THEME_VARS_FILE"
    exit 1
fi

# Source the theme variables into the current environment
# Run in a subshell to avoid polluting the caller's environment
(
    echo "Loading theme variables from $THEME_VARS_FILE..."
    # Filter out comments and empty lines before sourcing
    grep -vE '^\s*#|^\s*$' "$THEME_VARS_FILE" >/tmp/theme_vars_filtered.sh
    source /tmp/theme_vars_filtered.sh
    rm /tmp/theme_vars_filtered.sh # Clean up temporary file

    # Define template and output files
    declare -A TEMPLATE_MAP
    TEMPLATE_MAP=(
        ["$CONFIG_TEMPLATE_DIR/config.template"]="$CONFIG_OUTPUT_DIR/config"
        ["$CONFIG_TEMPLATE_DIR/config.d/monitor.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/monitor.conf"
        ["$CONFIG_TEMPLATE_DIR/config.d/monitor2.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/monitor2.conf"
        ["$CONFIG_TEMPLATE_DIR/config.d/monitor3.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/monitor3.conf"
        ["$CONFIG_TEMPLATE_DIR/config.d/bar.conf.template"]="$CONFIG_OUTPUT_DIR/config.d/bar.conf" # Restore bar template processing
    )

    # Build the list of variables expected by envsubst
    # Reads keys like 'export FOO=..' -> extracts 'FOO' -> prepends '$'
    VAR_LIST=$(grep -oP '^export\s+\K[^=]+' "$THEME_VARS_FILE" | sed 's/^/$/' | paste -sd,)
    # echo "Variables for envsubst: $VAR_LIST" # Uncomment for debugging

    # Process each template file
    for template_file in "${!TEMPLATE_MAP[@]}"; do
        output_file="${TEMPLATE_MAP[$template_file]}"
        echo "Processing '$template_file' -> '$output_file'"

        if [ ! -f "$template_file" ]; then
            echo "Warning: Template file not found: $template_file. Skipping."
            continue
        fi

        # Add Autogenerated header to the output file
        echo "# AUTOGENERATED by build-i3-config.sh, DO NOT EDIT MANUALLY" >"$output_file"
        echo "# Instead, edit the template file: $template_file" >>"$output_file"

        # Use envsubst to replace only the variables defined in the theme file
        envsubst "$VAR_LIST" <"$template_file" >>"$output_file"
    done
) # End of subshell

# --- Set Default Tray Output in bar.conf ---
# After applying the theme, ensure bar.conf reflects the default 'monitor' layout tray setting.
DEFAULT_MONITOR_CONF="$CONFIG_OUTPUT_DIR/config.d/monitor.conf"
GENERATED_BAR_CONF="$CONFIG_OUTPUT_DIR/config.d/bar.conf"

echo "Setting default tray output in '$GENERATED_BAR_CONF' based on '$DEFAULT_MONITOR_CONF'..."

if [ -f "$DEFAULT_MONITOR_CONF" ] && [ -f "$GENERATED_BAR_CONF" ]; then
    # Extract the default tray monitor value
    DEFAULT_TRAY_VALUE=$(grep '^set \$__tray_monitor' "$DEFAULT_MONITOR_CONF" | awk '{print $3}')

    if [ -n "$DEFAULT_TRAY_VALUE" ]; then
        # Update the tray_output line in the generated bar.conf
        sed -i "s/^\s*tray_output.*/  tray_output $DEFAULT_TRAY_VALUE/" "$GENERATED_BAR_CONF"
        echo "Default tray output set to '$DEFAULT_TRAY_VALUE' in '$GENERATED_BAR_CONF'."
    else
        echo "Warning: Could not extract \$__tray_monitor value from '$DEFAULT_MONITOR_CONF'. Default tray not set." >&2
    fi
else
    echo "Warning: Default monitor config ('$DEFAULT_MONITOR_CONF') or generated bar config ('$GENERATED_BAR_CONF') not found. Default tray not set." >&2
fi

echo "Theme '$THEME_NAME' applied successfully to files in $CONFIG_OUTPUT_DIR."
echo "Run set-monitor-layout <layout> if needed, then reload i3 (\$mod+Shift+c)."

# Send notification
notify-send "i3 Theme Applied" "Switched to '$THEME_NAME' theme. Reload i3."

exit 0
