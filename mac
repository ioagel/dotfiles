#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=~/dotfiles/Brewfile

fancy_echo "Configuring asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node and yarn ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"
npm install -g yarn

install_asdf_python() {
  python2_version="$(asdf list-all python| grep -v "[a-z3]" | tail -1)"
  python3_version="$(asdf list-all python| grep -v "[a-z]" | tail -1)"

  for version in $python2_version $python3_version; do
    if ! asdf list python | grep -Fq "$version"; then
      asdf install python "$version"
    fi
  done
  # keep mac os x usage of python 2 as default
  asdf global python "$python2_version" "$python3_version"
}

pip_install_or_update() {
  local package="$1"
  local python_version="${2:-3}"
  if [ "$python_version" -eq 2 ]; then
    pip_version=pip2
  else
    pip_version=pip3
  fi
  if "$pip_version" list --user 2> /dev/null | grep -q "^$package"; then
    "$pip_version" install -U --user "$package" >/dev/null 2>&1
    echo "$pip_version: $package updated!"
  else
    "$pip_version" install --user "$package" >/dev/null 2>&1
    echo "$pip_version: $package installed!"
  fi
}

yarn_install_or_update() {
  local package="$1"
  if yarn global list | grep -q "$package"; then
    yarn global upgrade "$package"
    echo "$package updated!"
  else
    yarn global add "$package"
    echo "$package installed!"
  fi
}

# install oh-my-zsh and spaceship prompt
OH_ZSH="$HOME/.oh-my-zsh"
if [ ! -d "$OH_ZSH" ]; then
  fancy_echo "Installing oh-my-zsh and spaceship prompt ..."
  git clone https://github.com/robbyrussell/oh-my-zsh.git "$OH_ZSH"
  git clone https://github.com/denysdovhan/spaceship-prompt.git \
    "$OH_ZSH/custom/themes/spaceship-prompt"
  ln -s "$OH_ZSH/custom/themes/spaceship-prompt/spaceship.zsh-theme" \
    "$OH_ZSH/custom/themes/spaceship.zsh-theme"
  # install zsh-syntax-highlighting
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  # install zsh-history-substring-search
  git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
  # install zsh-completions
  git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
fi

# asdf python 2 and 3 setup
fancy_echo "Installing latest Python 2 and 3..."
add_or_update_asdf_plugin "python" "https://github.com/danhper/asdf-python.git"
install_asdf_python
# install python 2 and 3 packages
fancy_echo "Installing latest pip modules ..."
pip_install_or_update pynvim
pip_install_or_update pynvim 2

# install node packages
fancy_echo "Installing latest npm packages ..."
yarn_install_or_update neovim

# iTerm2, vim, tmux support for italics
fancy_echo "Installing italics-capable terminfo files for iTerm2, vim, tmux..."
if [ ! -r ~/.terminfo/78/xterm-256color-italic ]; then
  tic -x ~/dotfiles/iterm2/xterm-256color-italic.terminfo
fi
if [ ! -r ~/.terminfo/74/tmux-256color ]; then
  tic -x ~/dotfiles/iterm2/tmux-256color.terminfo
fi

fancy_echo "Setup sync for iTerm2 Prefs in a custom folder ..."
killall cfprefsd     # This will get rid of cached settings
# Specify the preferences directory
defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "~/dotfiles/iterm2"
# Tell iTerm2 to use the custom preferences in the directory
defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true

# Alacritty, vim, tmux support for italics
fancy_echo "Installing italics-capable terminfo files for Alacritty, vim, tmux..."
if [ ! -r ~/.terminfo/61/alacritty ]; then
  alacritty_terminfo=$(mktemp)
  curl -o "$alacritty_terminfo" https://raw.githubusercontent.com/jwilm/alacritty/master/extra/alacritty.info
  tic -xe alacritty,alacritty-direct "$alacritty_terminfo"
fi

if [ -r "$HOME/.rcrc" ]; then
  fancy_echo "Updating dotfiles ..."
  rcup "$RC_WITH_SECRET"
fi

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
